package com.tay.freshnews;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.text.Html;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import com.sina.weibo.sdk.AccessTokenKeeper;
import com.sina.weibo.sdk.auth.AuthInfo;
import com.sina.weibo.sdk.auth.Oauth2AccessToken;
import com.sina.weibo.sdk.auth.WeiboAuthListener;
import com.sina.weibo.sdk.auth.sso.SsoHandler;
import com.sina.weibo.sdk.exception.WeiboException;
import com.tay.freshnews.common.Const;
import com.tay.freshnews.common.Util;
import com.tencent.connect.UserInfo;
import com.tencent.connect.common.Constants;
import com.tencent.tauth.IUiListener;
import com.tencent.tauth.Tencent;
import com.tencent.tauth.UiError;

import org.json.JSONException;
import org.json.JSONObject;

import java.lang.ref.WeakReference;

public class LoginActivity extends ActionBarActivity implements View.OnClickListener {

    private static final String TAG = "LoginActivity";
    private TextView mRegisterTip;
    private View mQQLogin;
    private View mWeiBoLogin;
    private View mWeChatLogin;
    private Toolbar mToolBar;

    private Tencent mTencent;
    private UserInfo mInfo;
    private LoginHandler mLoginHandler;

    private SsoHandler mSsoHandler;
    private AuthInfo mAuthInfo;
    private AuthListener mWeiboAuthListener;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);
        findViews();
        initViews();

    }

    private void findViews() {
        mLoginHandler = new LoginHandler(this);
        mRegisterTip = (TextView) findViewById(R.id.register_tip);
        mQQLogin = (View) findViewById(R.id.qq_login);
        mWeiBoLogin = (View) findViewById(R.id.weibo_login);
        mWeChatLogin = (View) findViewById(R.id.wechat_login);
        mToolBar = (Toolbar) findViewById(R.id.toolbar);
        mToolBar.setTitle(getResources().getString(R.string.toolbar_title_login));
        setSupportActionBar(mToolBar);
    }

    private void initViews() {
        mWeiboAuthListener = new AuthListener();
        mRegisterTip.setText(Html.fromHtml(getResources().getString(R.string.textView_no_account)));
        mRegisterTip.setOnClickListener(this);
        mQQLogin.setOnClickListener(this);
        mWeiBoLogin.setOnClickListener(this);
        mWeChatLogin.setOnClickListener(this);
        /** 设置toolbar **/
        mToolBar.setNavigationIcon(R.mipmap.icon_back);
        mToolBar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                LoginActivity.this.finish();
            }
        });
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.qq_login:
                doQQLogin();
                break;
            case R.id.weibo_login:
                doWeiBoLogin();
                break;
            case R.id.register_tip:
                doRegister();
                break;
            default:
                break;
        }
    }

    private void doRegister() {
        Intent intent = new Intent();
        intent.setClass(this,RegisterActivity.class);
        startActivity(intent);
    }

    private void doWeiBoLogin() {
//        mAuthInfo = new AuthInfo(this,
//                Const.WEIBO_APP_KEY,
//                Const.WEIBO_REDIRECT_URL,
//                Const.WEIBO_SCOPE);
//        if (mAuthInfo != null) {
//            mSsoHandler = new SsoHandler(this, mAuthInfo);
//            mSsoHandler.authorizeWeb(mWeiboAuthListener);
//        }
    }


    private class AuthListener implements WeiboAuthListener {

        @Override
        public void onComplete(Bundle values) {

            Oauth2AccessToken accessToken = Oauth2AccessToken
                    .parseAccessToken(values);
            if (accessToken != null && accessToken.isSessionValid()) {
                AccessTokenKeeper.writeAccessToken(getApplicationContext(),
                        accessToken);
                final String uid = accessToken.getUid();
                final String token = accessToken.getToken();

                new Thread(new Runnable() {

                    @Override
                    public void run() {
                        StringBuilder sBuilder = new StringBuilder();
                        sBuilder.append(
                                "https://api.weibo.com/2/users/show.json?")
                                .append("source=")
                                .append(Const.WEIBO_APP_KEY)
                                .append("&uid=").append(uid)
                                .append("&access_token=").append(token);
                        String jsonString = null;
//                        try {
//                            jsonString = HttpOperation.getRequest(sBuilder
//                                    .toString());
//
//                            if (null != jsonString) {
//                                try {
//                                    JSONObject response1 = new JSONObject(
//                                            jsonString);
//                                } catch (JSONException e) {
//                                    e.printStackTrace();
//                                }
//                            }
//
//                        } catch (Exception e) {
//                            e.printStackTrace();
//                        }
                    }
                }).start();
            }
        }


        @Override
        public void onWeiboException(WeiboException e) {
            Toast.makeText(getApplicationContext(), e.getMessage(),
                    Toast.LENGTH_SHORT).show();
        }


        @Override
        public void onCancel() {
        }
    }







    private void doQQLogin() {
        if (mTencent == null) {
            mTencent = Tencent.createInstance(Const.TENCENT_APP_ID, this);
        }
        mTencent.login(this, "all", loginListener);
    }

    private IUiListener loginListener = new BaseUiListener() {
        @Override
        protected void doComplete(JSONObject values) {
            super.doComplete(values);
            initOpenidAndToken(values);
            updateUserInfo();
        }
    };

    public void initOpenidAndToken(JSONObject jsonObject) {
        try {
            String token = jsonObject.getString(Constants.PARAM_ACCESS_TOKEN);
            String expires = jsonObject.getString(Constants.PARAM_EXPIRES_IN);
            String openId = jsonObject.getString(Constants.PARAM_OPEN_ID);
            if (!TextUtils.isEmpty(token) && !TextUtils.isEmpty(expires)
                    && !TextUtils.isEmpty(openId)) {
                mTencent.setAccessToken(token, expires);
                mTencent.setOpenId(openId);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void updateUserInfo() {
        if (mTencent != null && mTencent.isSessionValid()) {
            IUiListener listener = new IUiListener() {

                @Override
                public void onError(UiError e) {

                }

                @Override
                public void onComplete(final Object response) {
                    Message msg = new Message();
                    msg.obj = response;
                    msg.what = 0;
                    mLoginHandler.sendMessage(msg);
                    new Thread() {

                        @Override
                        public void run() {
                            JSONObject json = (JSONObject) response;
                            if (json.has("figureurl")) {
                                Bitmap bitmap = null;
                                try {
                                    bitmap = Util.getbitmap(json.getString("figureurl_qq_2"));
                                } catch (JSONException e) {

                                }
                                Message msg = new Message();
                                msg.obj = bitmap;
                                msg.what = 1;
                                mLoginHandler.sendMessage(msg);
                            }
                        }

                    }.start();
                }

                @Override
                public void onCancel() {

                }
            };
            mInfo = new UserInfo(this, mTencent.getQQToken());
            mInfo.getUserInfo(listener);

        } else {
            Log.i(TAG, "userinfo is null");
        }
    }

    public class BaseUiListener implements IUiListener {
        @Override
        public void onComplete(Object response) {
            if (null == response) {
                Log.i(TAG, "登录失败");
                return;
            }
            JSONObject jsonResponse = (JSONObject) response;
            if (null != jsonResponse && jsonResponse.length() == 0) {
                Log.i(TAG, "登录失败");
                return;
            }
            doComplete((JSONObject) response);
        }

        protected void doComplete(JSONObject response) {

        }

        @Override
        public void onCancel() {

        }

        @Override
        public void onError(UiError uiError) {

        }
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == Constants.REQUEST_LOGIN) {
            Tencent.onActivityResultData(requestCode, resultCode, data, loginListener);
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    private static class LoginHandler extends Handler {

        private WeakReference<Context> mReference;

        private LoginHandler(Context context){
            mReference = new WeakReference<Context>(context);
        }

        @Override
        public void handleMessage(Message msg) {

            if(mReference == null || msg == null) {
                return;
            }
            LoginActivity mActivity = (LoginActivity) mReference.get();
            if (mActivity == null) {
                return;
            }
            if (msg.what == 0) {
                JSONObject response = (JSONObject) msg.obj;
                if (response.has("nickname")) {
                    try {
                        Log.i(TAG, response.getString("nickname"));
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            } else if (msg.what == 1) {
                Bitmap bitmap = (Bitmap) msg.obj;
                Log.i(TAG, bitmap.toString());
            }
            super.handleMessage(msg);
        }
    }


}
